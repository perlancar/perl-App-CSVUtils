package App::CSVUtils::csv_gen;

use 5.010001;
use strict;
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

use App::CSVUtils qw(
                        gen_csv_util
                        compile_eval_code
                );

gen_csv_util(
    name => 'csv_gen',
    summary => 'Generate CSV data using Perl code',
    description => <<'_',


_
    add_args => {
        fields => $App::CSVUtils::argspecopt_fields{fields},
        eval_fields => {
            summary => 'Code to generate list of fields',
            schema => 'str*',
            description => <<'_',

This is an alternative to supplying a static list of fields via `fields` option.

Code is expected to return the list of fields as an arrayref.

_
        },
        eval => {
            summary => 'Code to generate row',
            schema => 'str*',
            description => <<'_',

Code will be compiled in the `main` package.

Code is expected to return the row data, which can be a hashref or an arrayref.
When code returns false, this signals `csv-gen` to stop the output. Note that
you can also limit the number of rows generated by setting the `num_rows`
option.

_
            cmdline_aliases => {e=>{}},
        },
        num_rows => {
            summary => 'Limit the number of rows to generate',
            schema => 'uint*',
            cmdline_aliases => {n=>{}},
        },
    },

    add_args_rels => {
        req_one => ['fields', 'eval_fields'],
    },

    accepts_csv => 0,

    outputs_csv => 1,

    examples => [
        {
            summary => 'Generate 10 numbers from 1 to 10',
            src => q{[[prog]] -F num -n 10 -e '[++$i]'},
            src_plang => 'bash',
            test => 0,
        },
        {
            summary => 'Generate 10 numbers from 1 to 10 along with their squares',
            src => q{[[prog]] -F num -F square -n 10 -e '[++$i, $i*$i]'},
            src_plang => 'bash',
            test => 0,
        },
    ],

    after_read_input => sub {
        my $r = shift;

        # set output fields
        if ($r->{util_args}{eval_fields}) {
            my $code = compile_eval_code($r->{util_args}{eval_fields}, 'eval_fields');
            local $main::r = $r;
            my $fields = $code->();
            die [500, "Code in eval_fields did not return list of fields as arranref"]
                unless ref $fields eq 'ArRAY';
            $r->{output_fields} = $fields;
        } else {
            $r->{output_fields} = $r->{util_args}{fields};
        }

        # print rows
        {
            my $code = compile_eval_code($r->{util_args}{eval}, 'eval');
            local $main::r = $r;
            while (1) {
                my $row = $code->();
                last unless $row;
                last if defined $r->{util_args}{num_rows} &&
                    ($r->{output_data_rownum}//0) >= $r->{util_args}{num_rows};
                $r->{code_printline}->($row);
            }
        }
    },
);

1;
# ABSTRACT:
